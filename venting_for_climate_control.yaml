blueprint:
  name: Ventilation for climate control
  description: |
    Switch a ventilation device in order to achieve a climate set-point,
    - if the desired relative humidity or temperature diverge from their set-points more than a given tolerance, and
    - if the outside relative humidity and temperature are favorable, and
    - if venting will not worsen the room climate, if it is already outside the tolerances.

    <details>
    <summary><strong>Detailed switching scheme:</strong></summary>

    This is a sketch how inside relative humidity is controlled using inside/outside dewpoints. The same areas are defined for controlling inside temperature using inside/outside temperature.

                 ^ TD_in - TD_out
                 |
          OOO    |////XXXXXX
          OOO    |////XXXXXX +D_eff
          OOO    |//////////
                 |////////// +D_min
                 |
        <--------+-----------> r_in - r_set
                 |
          ///////|
          ///////|    OOOOOO -T_tol
          XXX////|    OOOOOO
          XXX////|    OOOOOO
                 |<--> r_tol
                 v

    `XXX` Ventilation turned on in this area.
    `///` Ventilation turned off when leaving this tolerance area.
    `OOO` Ventilation suppressed to not worsen climate.
    </details>
  source_url: https://gist.github.com/akloeckner/008668ce8ea4504bf2bd168fc58e5eb4
  domain: automation
  input:
    sensor_r_in:
      name: Inside relative humidity sensor
      description: The sensor to use as inside relative humidity
      selector:
        entity:
          filter:
          - domain: sensor
            device_class: humidity
    sensor_T_in:
      name: Inside temperature sensor
      description: The sensor to use as inside temperature
      selector:
        entity:
          filter:
          - domain: sensor
            device_class: temperature
    sensor_r_out:
      name: Outside relative humidity sensor
      description: The sensor to use as outside relative humidity
      selector:
        entity:
          filter:
          - domain: sensor
            device_class: humidity
    sensor_T_out:
      name: Outside temperature sensor
      description: The sensor to use as outside temperature
      selector:
        entity:
          filter:
          - domain: sensor
            device_class: temperature
    switch_fan:
      name: Ventilator switch
      description: The switch used to activate ventilation
      selector:
        entity:
          filter:
          - domain:
            - switch
            - input_boolean
    r_set:
      name: Relative humidity set-point
      description: The relative humidity we are trying to achieve
      #unit_of_measurement: '%'
      default: 50
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider
    r_tol:
      name: Relative humidity tolerance
      description: The difference to the set-point we will accept
      #unit_of_measurement: '%'
      default: 5
      selector:
        number:
          min: 1
          max: 30
          step: 1
          mode: slider
    T_set:
      name: Temperature set-point
      description: The temperature we are trying to achieve
      #unit_of_measurement: °C
      default: 20
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          mode: slider
    T_tol:
      name: Temperature tolerance
      description: The difference to the set-point we will accept
      #unit_of_measurement: K
      default: 2
      selector:
        number:
          min: 1
          max: 10
          step: 0.5
          mode: slider
    D_min:
      name: Minimum required temperature difference
      description: The minimum temperature difference required for venting
      #unit_of_measurement: K
      default: 0.5
      selector:
        number:
          min: -5
          max: 5
          step: 0.5
          mode: slider
    D_eff:
      name: Effective venting temperature difference
      description: The temperature difference required for effective venting
      #unit_of_measurement: K
      default: 1.5
      selector:
        number:
          min: 0
          max: 10
          step: 0.5
          mode: slider
    T_ice:
      name: Ice prevention temperature
      description: The minimum outside temperature required for venting
      #unit_of_measurement: °C
      default: 5
      selector:
        number:
          min: -5
          max: 5
          step: 0.5
          mode: slider
    binary_blockers:
      name: Binary entities to prevent ventilation
      description: No ventilation will occur if any of these are `on`
      selector:
        entity:
          multiple: true
          filter:
          - domain:
            - binary_sensor
            - input_boolean
            - switch
    switch_on_delay:
      name: Delay before switching ventilation on
      description: The ventilation conditions have to be met for this amount of time
      default:
        minutes: 10
      selector:
        duration:

mode: single
max_exceeded: silent

trigger_variables:
  r_set: !input 'r_set'
  r_tol: !input 'r_tol'
  T_set: !input 'T_set'
  T_tol: !input 'T_tol'
  D_min: !input 'D_min'
  D_eff: !input 'D_eff'
  T_ice: !input 'T_ice'
  sensor_r_in:     !input 'sensor_r_in'
  sensor_T_in:     !input 'sensor_T_in'
  sensor_r_out:    !input 'sensor_r_out'
  sensor_T_out:    !input 'sensor_T_out'
  switch_fan:      !input 'switch_fan'
  binary_blockers: !input 'binary_blockers'

triggers:
  - alias: Venting on (r high)
    value_template: &r_high |-
      {% set r_in  = states(sensor_r_in)  | float(r_set) %}
      {% set T_in  = states(sensor_T_in)  | float(T_set) %}
      {% set r_out = states(sensor_r_out) | float(r_in)  %}
      {% set T_out = states(sensor_T_out) | float(T_in)  %}

      {%- from 'humidity.jinja' import TD %}
      {% set D_in  = TD(r_in,  T_in)  | float(99) %}
      {% set D_out = TD(r_out, T_out) | float(99) %}

      {{ (
        r_in - r_set > +r_tol and
        D_in - D_out > +D_eff
      ) }}
    << : &on
      trigger: template
      id: "on"
      for: !input 'switch_on_delay'
      variables:
        target: 'on'
  - alias: Venting on (r low)
    value_template: &r_low |-
      {% set r_in  = states(sensor_r_in)  | float(r_set) %}
      {% set T_in  = states(sensor_T_in)  | float(T_set) %}
      {% set r_out = states(sensor_r_out) | float(r_in)  %}
      {% set T_out = states(sensor_T_out) | float(T_in)  %}

      {%- from 'humidity.jinja' import TD %}
      {% set D_in  = TD(r_in,  T_in)  | float(99) %}
      {% set D_out = TD(r_out, T_out) | float(99) %}

      {{ (
        r_in - r_set < -r_tol and
        D_in - D_out < -D_eff
      ) }}
    << : *on
  - alias: Venting on (T high)
    value_template: &T_high |-
      {% set T_in  = states(sensor_T_in)  | float(T_set) %}
      {% set T_out = states(sensor_T_out) | float(T_in)  %}

      {{ (
        T_in - T_set > +T_tol and
        T_in - T_out > +D_eff
      ) }}
    << : *on
  - alias: Venting on (T low)
    value_template: &T_low |-
      {% set T_in  = states(sensor_T_in)  | float(T_set) %}
      {% set T_out = states(sensor_T_out) | float(T_in)  %}

      {{ (
        T_in - T_set < -T_tol and
        T_in - T_out < -D_eff
      ) }}
    << : *on

  - alias: Venting off (not r high)
    value_template: |-
      {% set r_in  = states(sensor_r_in)  | float(r_set) %}
      {% set T_in  = states(sensor_T_in)  | float(T_set) %}
      {% set r_out = states(sensor_r_out) | float(r_in)  %}
      {% set T_out = states(sensor_T_out) | float(T_in)  %}

      {%- from 'humidity.jinja' import TD %}
      {% set D_in  = TD(r_in,  T_in)  | float(99) %}
      {% set D_out = TD(r_out, T_out) | float(99) %}

      {% set r_tol  = 0 %}
      {{ not (
        r_in - r_set > +r_tol and
        D_in - D_out > +D_min
      ) }}
    << : &off
      trigger: template
      id: "off"
      variables:
        target: 'off'
  - alias: Venting off (not r low)
    value_template: |-
      {% set r_in  = states(sensor_r_in)  | float(r_set) %}
      {% set T_in  = states(sensor_T_in)  | float(T_set) %}
      {% set r_out = states(sensor_r_out) | float(r_in)  %}
      {% set T_out = states(sensor_T_out) | float(T_in)  %}

      {%- from 'humidity.jinja' import TD %}
      {% set D_in  = TD(r_in,  T_in)  | float(99) %}
      {% set D_out = TD(r_out, T_out) | float(99) %}

      {% set r_tol  = 0 %}
      {{ not (
        r_in - r_set < -r_tol and
        D_in - D_out < -D_min
      ) }}
    << : *off
  - alias: Venting off (not T high)
    value_template: |-
      {% set T_in  = states(sensor_T_in)  | float(T_set) %}
      {% set T_out = states(sensor_T_out) | float(T_in)  %}

      {% set T_tol  = 0 %}
      {{ not (
        T_in - T_set > +T_tol and
        T_in - T_out > +D_min
      ) }}
    << : *off
  - alias: Venting off (not T low)
    value_template: |-
      {% set T_in  = states(sensor_T_in)  | float(T_set) %}
      {% set T_out = states(sensor_T_out) | float(T_in)  %}

      {% set T_tol  = 0 %}
      {{ not (
        T_in - T_set < -T_tol and
        T_in - T_out < -D_min
      ) }}
    << : *off

  - alias: No-go condition
    trigger: template
    id: "nogo"
    value_template: &nogo |-
      {% set r_in  = states(sensor_r_in)  | float(r_set) %}
      {% set T_in  = states(sensor_T_in)  | float(T_set) %}
      {% set r_out = states(sensor_r_out) | float(r_in)  %}
      {% set T_out = states(sensor_T_out) | float(T_in)  %}

      {%- from 'humidity.jinja' import TD %}
      {% set D_in  = TD(r_in,  T_in)  | float(99) %}
      {% set D_out = TD(r_out, T_out) | float(99) %}

      {{
        r_in - r_set > +r_tol and
        D_in - D_out < -D_min or
        r_in - r_set < -r_tol and
        D_in - D_out > +D_min or
        T_in - T_set > +T_tol and
        T_in - T_out < -D_min or
        T_in - T_set < -T_tol and
        T_in - T_out > +D_min or
        T_out < T_ice or
        binary_blockers
        | expand
        | selectattr('state', 'eq', 'on')
        | list
        | count
        > 0
      }}
    variables:
      target: 'off'

conditions:
  - alias: If fan needs switching
    condition: template
    value_template: "{{ not is_state(switch_fan, target) }}"

actions:
  - choose:
      - conditions:
          - condition: trigger
            id:
              - nogo
        sequence:
          - alias: Switch off fan
            action: homeassistant.turn_off
            target:
              entity_id: !input 'switch_fan'
      - conditions:
          - condition: trigger
            id:
              - "on"
        sequence:
          - alias: If not in no-go condition...
            not:
              - *nogo
          - alias: Switch on fan
            action: homeassistant.turn_on
            target:
              entity_id: !input 'switch_fan'
      - conditions:
          - condition: trigger
            id:
              - "off"
        sequence:
          - alias: If not in venting condition...
            not:
              - *r_high
              - *r_low
              - *T_high
              - *T_low
          - alias: Switch off fan
            action: homeassistant.turn_off
            target:
              entity_id: !input 'switch_fan'
